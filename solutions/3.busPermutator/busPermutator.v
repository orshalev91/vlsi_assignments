`timescale 1ns / 1ns

module busPermutator(
    input [3:0] din,
    input [4:0] select,
    output reg [3:0] dout
);

// cases generated by chatGPT on a smaller scale code since I dont think that was the smart solution
// I was trying to look for a way to implement dependancy between switch cases with instant output and no
// clocks but couldnt find the answer

always @(din, select) begin
    case (select)
        // 5'b00000: dout = din;            // No permutation
        // 5'b00001: dout = din[3:0];        // Reverse order
        // 5'b00010: dout = din[2:0] & din[3];// Shift right by 1
        // 5'b00011: dout = din[1:0] & din[3:2]; // Shift right by 2
        5'b00100: dout = {din[0], din[3:1]}; // Swap first and last bits
        5'b00101: dout = {din[0], din[2:1], din[3]}; // Custom permutation 1
        5'b00110: dout = {din[2:0], din[3]}; // Custom permutation 2
        5'b00111: dout = {din[1:0], din[3:2]}; // Custom permutation 3
        5'b01000: dout = {din[1], din[3:2], din[0]}; // Custom permutation 4
        5'b01001: dout = {din[2], din[3], din[1:0]}; // Custom permutation 5
        5'b01010: dout = {din[1], din[0], din[3:2]}; // Custom permutation 6
        5'b01011: dout = {din[0], din[1], din[2], din[3]}; // Permutation 7
        5'b01100: dout = {din[0], din[2:1], din[3]}; // Permutation 8
        5'b01101: dout = {din[3:2], din[1:0]}; // Permutation 9
        5'b01110: dout = {din[2], din[0], din[1], din[3]}; // Permutation 10
        5'b01111: dout = {din[1], din[3], din[2:0]}; // Permutation 11
        5'b10000: dout = {din[3], din[1:0], din[2]}; // Permutation 12
        5'b10001: dout = {din[0], din[3:1], din[2]}; // Permutation 13
        5'b10010: dout = {din[2:1], din[3:0]}; // Permutation 14
        5'b10011: dout = {din[1], din[3:2], din[0]}; // Permutation 15
        5'b10100: dout = {din[3:2], din[0], din[1]}; // Permutation 16
        5'b10101: dout = {din[1:0], din[3], din[2]}; // Permutation 17
        5'b10110: dout = {din[3], din[0], din[2:1]}; // Permutation 18
        5'b10111: dout = {din[2], din[1], din[0], din[3]}; // Permutation 19
        5'b11000: dout = {din[0], din[3:1], din[2]}; // Permutation 20
        5'b11001: dout = {din[2:1], din[0], din[3]}; // Permutation 21
        5'b11010: dout = {din[3], din[1], din[0], din[2]}; // Permutation 22
        5'b11011: dout = {din[0], din[2], din[3], din[1]}; // Permutation 23
        5'b11100: dout = {din[1], din[2], din[3], din[0]}; // Permutation 24
        default: dout = din;               // Default case, no permutation
    endcase
  end

endmodule
